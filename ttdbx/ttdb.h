typedef struct _tt_access {
	uid_t user;
	gid_t group;
	mode_t mode;
}
 _tt_access;

typedef struct _tt_property_value {
	struct {
		u_int value_len;
		char *value_val;
	}
	 value;
}
 _tt_property_value;

typedef struct _tt_property {
	char *name;
	struct {
		u_int values_len;
		_tt_property_value *values_val;
	}
	 values;
}
 _tt_property;

typedef struct _tt_property_list {
	u_int properties_len;
	_tt_property *properties_val;
}
 _tt_property_list;

typedef struct _tt_create_file_args {
	char *file;
	_tt_property_list properties;
	_tt_access access;
}
 _tt_create_file_args;

bool_t xdr_tt_access(XDR *, _tt_access *);
bool_t xdr_tt_property_value(XDR *, _tt_property_value *);
bool_t xdr_tt_property(XDR *, _tt_property *);
bool_t xdr_tt_create_file_args(XDR *, _tt_create_file_args *);

bool_t
xdr_tt_access(XDR * xdrs, _tt_access * objp)
{
	if (!xdr_long(xdrs, (long *) &objp->user)) {
		return (FALSE);
	}
	if (!xdr_long(xdrs, (long *) &objp->group)) {
		return (FALSE);
	}
	if (!xdr_u_long(xdrs, (unsigned long *) &objp->mode)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_tt_property_value(XDR * xdrs, _tt_property_value * objp)
{
	if (!xdr_bytes(xdrs, (char **) &objp->value.value_val, (u_int
					  *) & objp->value.value_len, ~0)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_tt_property(XDR * xdrs, _tt_property * objp)
{
	if (!xdr_string(xdrs, &objp->name, ~0)) {
		return (FALSE);
	}
	if (!xdr_array(xdrs, (char **) &objp->values.values_val, (u_int
	       *) & objp->values.values_len, ~0, sizeof(_tt_property_value),
		       (xdrproc_t) xdr_tt_property_value)) {
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_tt_create_file_args(XDR * xdrs, _tt_create_file_args * objp)
{
	if (!xdr_string(xdrs, &objp->file, ~0)) {
		return (FALSE);
	}
	if (!xdr_array(xdrs, (char **) &objp->properties.properties_val, (u_int
	     *) & objp->properties.properties_len, ~0, sizeof(_tt_property),
		       (xdrproc_t) xdr_tt_property)) {
		return (FALSE);
	}
	if (!xdr_tt_access(xdrs, &objp->access)) {
		return (FALSE);
	}
	return (TRUE);
}
